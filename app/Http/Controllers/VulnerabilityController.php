<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Vulnerability;
use Illuminate\Support\Str;
use Illuminate\Validation\ValidationException;

class VulnerabilityController extends Controller
{
    public function index() {
        $vulnerabilities = Vulnerability::all();

        return view('vulnerability.index', compact('vulnerabilities'));
    }

    public function view($slug) {
        $vulnerability = Vulnerability::where('slug', $slug)->firstOrFail();

        return view('vulnerability.view', compact('vulnerability'));
    }

    public function create() {
        return view('vulnerability.create');
    }

    public function input(Request $request) {
        $rules = [
            'title' => ['required', 'string', 'max:255'],
            'risk_level' => ['required', 'numeric', 'min:1', 'max:3'],
            'description' => ['required']
        ];
        $request->validate($rules);

        $slug = Str::slug($request->title);
        $checkSlug = Vulnerability::where('slug', $slug)->get();

        if($checkSlug->count() > 0) {
            throw ValidationException::withMessages(['title' => 'Title already exists.']);
        }

        Vulnerability::create([
            'title' => $request->title,
            'slug' => $slug,
            'risk_level' => $request->risk_level,
            'description' => $request->description
        ]);

        return redirect()->route('vulnerability.create')->with('status', 'Vulnerability successfully created.');
    }

    public function edit($slug) {
        $vulnerability = Vulnerability::where('slug', $slug)->firstOrFail();

        return view('vulnerability.edit', compact('vulnerability'));
    }

    public function update(Request $request, $slug) {
        $rules = [
            'title' => ['required', 'string', 'max:255'],
            'risk_level' => ['required', 'numeric', 'min:1', 'max:3'],
            'description' => ['required']
        ];
        $request->validate($rules);

        $newSlug = Str::slug($request->title);
        $checkNewSlug = Vulnerability::where('slug', $newSlug)->get();

        if($checkNewSlug->count() > 0 && $newSlug != $slug) {
            throw ValidationException::withMessages(['title' => 'Title already exists.']);
        }

        $vulnerability = Vulnerability::where('slug', $slug)->firstOrFail();

        $vulnerability->update([
            'title' => $request->title,
            'slug' => $newSlug,
            'risk_level' => $request->risk_level,
            'description' => $request->description
        ]);

        return redirect()->route('vulnerability.edit', $newSlug)->with('status', 'Vulnerability successfully updated.');
    }

    public function delete($slug) {
        $vulnerability = Vulnerability::where('slug', $slug)->firstOrFail();
        $vulnerability->delete();

        return redirect()->route('vulnerability.index')->with('status', 'Vulnerability successfully deleted.');
    }
}
